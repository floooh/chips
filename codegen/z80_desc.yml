#== QUADRANT X1 ================================================================
HALT:
  cond: (x == 1) and (y == 6) and (z == 6)
  mcycles:
    - { type: overlapped, action: "pins=_z80_halt(cpu,pins)" }

# NOTE: RRZ and RRY are special case for H and L which are never mapped
# to IXH/IYH and IXL/IYL
LD (HL),$RZ:
  cond: (x == 1) and (y == 6) and (z != 6)
  flags: { indirect: true }
  mcycles:
    - { type: mwrite, ab: $ADDR, db: $RRZ }

LD $RY,(HL):
  cond: (x == 1) and (y != 6) and (z == 6)
  flags: { indirect: true }
  mcycles:
    - { type: mread,  ab: $ADDR, dst: $RRY }

LD $RY,$RZ:
  cond: (x == 1) and (y != 6) and (z != 6)
  mcycles:
    - { type: overlapped,  action: $RY=$RZ }

#== QUADRANT X2 ================================================================
$ALU (HL):
  cond: (x == 2) and (z == 6)
  flags: { indirect: true }
  mcycles:
    - { type: mread, ab: $ADDR, dst: $DLATCH }
    - { type: overlapped, action: "$ALU($DLATCH)" }

$ALU $RZ:
  cond: (x == 2) and (z != 6)
  mcycles:
    - { type: overlapped,  action: "$ALU($RZ)" }

#== QUADRANT X0 ================================================================

# assorted ops and relative jumps
NOP:
  cond: (x == 0) and (y == 0) and (z == 0)
  mcycles: []

EX AF,AF':
  cond: (x == 0) and (y == 1) and (z == 0)
  mcycles:
    - { type: overlapped, action: "_z80_ex_af_af2(cpu)" }

DJNZ d:
  cond: (x == 0) and (y == 2) and (z == 0)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: mread, ab: $PC++, dst: $DLATCH, action: "if(--$B==0){_goto($NEXTSTEP+5);}"}
    - { type: generic, tcycles: 5, action: "$PC+=(int8_t)$DLATCH;$WZ=$PC" }

JR d:
  cond: (x == 0) and (y == 3) and (z == 0)
  mcycles:
    - { type: mread, ab: $PC++, dst: $DLATCH }
    - { type: generic, tcycles: 5, action: "$PC+=(int8_t)$DLATCH;$WZ=$PC" }

JR $CC-4,d:
  cond: (x == 0) and (y >= 4) and (y <= 7) and (z == 0)
  mcycles:
    - { type: mread, ab: $PC++, dst: $DLATCH, action: "if(!($CC-4)){_goto($NEXTSTEP+5);}" }
    - { type: generic, tcycles: 5, action: "$PC+=(int8_t)$DLATCH;$WZ=$PC" }

# 16-bit load immediate/add
LD $RP,nn:
  cond: (x == 0) and (z == 1) and (q == 0)
  mcycles:
    - { type: mread,  ab: $PC++, dst: $RPL }
    - { type: mread,  ab: $PC++, dst: $RPH }

ADD HL,$RP:
  cond: (x == 0) and (z == 1) and (q == 1)
  mcycles:
    - { type: generic, tcycles: 7, action: "_z80_add16(cpu,$RP)"}

# indirect loading
LD (BC),A:
  cond: (x == 0) and (z == 2) and (q == 0) and (p == 0)
  mcycles:
    - { type: mwrite, ab: $BC, db: $A, action: "$WZL=$C+1;$WZH=$A" }

LD (DE),A:
  cond: (x == 0) and (z == 2) and (q == 0) and (p == 1)
  mcycles:
    - { type: mwrite, ab: $DE, db: $A, action: "$WZL=$E+1;$WZH=$A" }

LD (nn),HL:
  cond: (x == 0) and (z == 2) and (q == 0) and (p == 2)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, ab: $PC++, dst: $WZH }
    - { type: mwrite, ab: $WZ++, db: $L }
    - { type: mwrite, ab: $WZ, db: $H }

LD (nn),A:
  cond: (x == 0) and (z == 2) and (q == 0) and (p == 3)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, ab: $PC++, dst: $WZH }
    - { type: mwrite, ab: $WZ++, db: $A, action: "$WZH=$A" }

LD A,(BC):
  cond: (x == 0) and (z == 2) and (q == 1) and (p == 0)
  mcycles:
    - { type: mread, ab: $BC, dst: $A, action: $WZ=$BC+1 }

LD A,(DE):
  cond: (x == 0) and (z == 2) and (q == 1) and (p == 1)
  mcycles:
    - { type: mread, ab: $DE, dst: $A, action: $WZ=$DE+1 }

LD HL,(nn):
  cond: (x == 0) and (z == 2) and (q == 1) and (p == 2)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, ab: $PC++, dst: $WZH }
    - { type: mread, ab: $WZ++, dst: $L }
    - { type: mread, ab: $WZ, dst: $H }

LD A,(nn):
  cond: (x == 0) and (z == 2) and (q == 1) and (p == 3)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, ab: $PC++, dst: $WZH }
    - { type: mread, ab: $WZ++, dst: $A }

# 16-bit inc/dec
INC $RP:
  cond: (x == 0) and (z == 3) and (q == 0)
  mcycles:
    - { type: generic, tcycles: 2, action: "$RP++" }

DEC $RP:
  cond: (x == 0) and (z == 3) and (q == 1)
  mcycles:
    - { type: generic, tcycles: 2, action: "$RP--" }

# 8-bit inc/dec
INC (HL):
  cond: (x == 0) and (y == 6) and (z == 4)
  flags: { indirect: true }
  mcycles:
    - { type: mread, tcycles: 4, ab: $ADDR, dst: $DLATCH, action: "$DLATCH=_z80_inc8(cpu,$DLATCH)" }
    - { type: mwrite, ab: $ADDR, db: $DLATCH }

INC $RY:
  cond: (x == 0) and (y != 6) and (z == 4)
  mcycles:
    - { type: overlapped, action: "$RY=_z80_inc8(cpu,$RY)" }

DEC (HL):
  cond: (x == 0) and (y == 6) and (z == 5)
  flags: { indirect: true }
  mcycles:
    - { type: mread, tcycles: 4, ab: $ADDR, dst: $DLATCH, action: "$DLATCH=_z80_dec8(cpu,$DLATCH)" }
    - { type: mwrite, ab: $ADDR, db: $DLATCH }

DEC $RY:
  cond: (x == 0) and (y != 6) and (z == 5)
  mcycles:
    - { type: overlapped, action: "$RY=_z80_dec8(cpu,$RY)" }

# 8-bit load immediate
LD $RY,n:
  cond: (x == 0) and (y != 6) and (z == 6)
  flags: { imm8: true }
  mcycles:
    - { type: mread, ab: $PC++, dst: $RY }

LD (HL),n:
  cond: (x == 0) and (y == 6) and (z == 6)
  flags: { indirect: true, imm8: true }
  mcycles:
    - { type: mread, ab: $PC++, dst: $DLATCH }
    - { type: mwrite, ab: $ADDR, db: $DLATCH }

# assorted operations on accumulator and flags
RLCA:
  cond: (x == 0) and (y == 0) and (z == 7)
  mcycles:
    - { type: overlapped, action: "_z80_rlca(cpu)" }

RRCA:
  cond: (x == 0) and (y == 1) and (z == 7)
  mcycles:
    - { type: overlapped, action: "_z80_rrca(cpu)" }

RLA:
  cond: (x == 0) and (y == 2) and (z == 7)
  mcycles:
    - { type: overlapped, action: "_z80_rla(cpu)" }

RRA:
  cond: (x == 0) and (y == 3) and (z == 7)
  mcycles:
    - { type: overlapped, action: "_z80_rra(cpu)" }

DAA:
  cond: (x == 0) and (y == 4) and (z == 7)
  mcycles:
    - { type: overlapped, action: "_z80_daa(cpu)" }

CPL:
  cond: (x == 0) and (y == 5) and (z == 7)
  mcycles:
    - { type: overlapped, action: "_z80_cpl(cpu)" }

SCF:
  cond: (x == 0) and (y == 6) and (z == 7)
  mcycles:
    - { type: overlapped, action: "_z80_scf(cpu)" }

CCF:
  cond: (x == 0) and (y == 7) and (z == 7)
  mcycles:
    - { type: overlapped, action: "_z80_ccf(cpu)" }

#== QUADRANT X3 ================================================================

# conditional return
RET $CC:
  cond: (x == 3) and (z == 0)
  mcycles:
    - { type: generic, tcycles: 1, action: "if(!$CC){_goto($NEXTSTEP+6);}"}
    - { type: mread, ab: $SP++, dst: $WZL }
    - { type: mread, ab: $SP++, dst: $WZH, action: "$PC=$WZ" }

# POP and various ops
POP $RP2:
  cond: (x == 3) and (z == 1) and (q == 0)
  mcycles:
    - { type: mread, ab: $SP++, dst: $RP2L }
    - { type: mread, ab: $SP++, dst: $RP2H }

RET:
  cond: (x == 3) and (z == 1) and (q == 1) and (p == 0)
  mcycles:
    - { type: mread, ab: $SP++, dst: $WZL }
    - { type: mread, ab: $SP++, dst: $WZH, action: "$PC=$WZ" }

EXX:
  cond: (x == 3) and (z == 1) and (q == 1) and (p == 1)
  mcycles:
    - { type: overlapped, action: "_z80_exx(cpu)" }

JP HL:
  cond: (x == 3) and (z == 1) and (q == 1) and (p == 2)
  mcycles:
    - { type: overlapped, action: "$PC=$HL" }

LD SP,HL:
  cond: (x == 3) and (z == 1) and (q == 1) and (p == 3)
  mcycles:
    - { type: generic, tcycles: 2, action: $SP=$HL }

# conditional jump
JP $CC,nn:
  cond: (x == 3) and (z == 2)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, ab: $PC++, dst: $WZH, action: "if($CC){$PC=$WZ;}"}

# assorted operations
JP nn:
  cond: (x == 3) and (y == 0) and (z == 3)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, ab: $PC++, dst: $WZH, action: "$PC=$WZ" }

CB prefix:
  cond: (x == 3) and (y == 1) and (z == 3)
  mcycles:
    - { type: overlapped, prefix: cb }

OUT (n),A:
  cond: (x == 3) and (y == 2) and (z == 3)
  mcycles:
    # NOTE: WZL++ is not a bug!
    - { type: mread, ab: $PC++, dst: $WZL, action: $WZH=$A }
    - { type: iowrite, ab: $WZ, db: $A, action: $WZL++ }

IN A,(n):
  cond: (x == 3) and (y == 3) and (z == 3)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL, action: $WZH=$A }
    - { type: ioread, ab: $WZ++, dst: $A }

EX (SP),HL:
  cond: (x == 3) and (y == 4) and (z == 3)
  mcycles:
    - { type: mread, ab: $SP, dst: $WZL }
    - { type: mread, tcycles: 4, ab: $SP+1, dst: $WZH }
    - { type: mwrite, ab: $SP+1, db: $H }
    - { type: mwrite, tcycles: 5, ab: $SP, db: $L, action: $HL=$WZ }

EX DE,HL:
  cond: (x == 3) and (y == 5) and (z == 3)
  mcycles:
    - { type: overlapped, action: "_z80_ex_de_hl(cpu)" }

DI:
  cond: (x == 3) and (y == 6) and (z == 3)
  mcycles:
    # NOTE: interrupts are never executed at the end of DI, no matter
    # what the previous IFF state was
    - { type: overlapped, action: "cpu->iff1=cpu->iff2=false"}

EI:
  cond: (x == 3) and (y == 7) and (z == 3)
  mcycles:
    # NOTE: interrupts are never executed at the end of an EI, no matter
    # what the previous IFF state was
    - { type: overlapped, action: "cpu->iff1=cpu->iff2=false", post_action: "cpu->iff1=cpu->iff2=true" }

# conditional CALL
CALL $CC,nn:
  cond: (x == 3) and (z == 4)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, ab: $PC++, dst: $WZH, action: "if (!$CC){_goto($NEXTSTEP+7);}" }
    - { type: generic, tcycles: 1 }
    - { type: mwrite, ab: --$SP, db: $PCH }
    - { type: mwrite, ab: --$SP, db: $PCL, action: "$PC=$WZ" }

# PUSH and various ops
PUSH $RP2:
  cond: (x == 3) and (z == 5) and (q == 0)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: mwrite, ab: --$SP, db: $RP2H }
    - { type: mwrite, ab: --$SP, db: $RP2L }

CALL nn:
  cond: (x == 3) and (z == 5) and (q == 1) and (p == 0)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, tcycles: 4, ab: $PC++, dst: $WZH }
    - { type: mwrite, ab: --$SP, db: $PCH }
    - { type: mwrite, ab: --$SP, db: $PCL, action: "$PC=$WZ" }

DD prefix:
  cond: (x == 3) and (z == 5) and (q == 1) and (p == 1)
  mcycles:
    - { type: overlapped, prefix: dd }

ED prefix:
  cond: (x == 3) and (z == 5) and (q == 1) and (p == 2)
  mcycles:
    - { type: overlapped, prefix: ed }

FD prefix:
  cond: (x == 3) and (z == 5) and (q == 1) and (p == 3)
  mcycles:
    - { type: overlapped, prefix: fd }

$ALU n:
  cond: (x == 3) and (z == 6)
  flags: { imm8: true }
  mcycles:
    - { type: mread, ab: $PC++, dst: $DLATCH }
    - { type: overlapped, action: "$ALU($DLATCH)" }

RST $Y*8:
  cond: (x == 3) and (z == 7)
  mcycles:
    # one extra tcycle
    - { type: generic, tcycles: 1 }
    - { type: mwrite, ab: --$SP, db: $PCH }
    - { type: mwrite, ab: --$SP, db: $PCL, action: "$WZ=$Y*8;$PC=$WZ"}

#== ED prefix block ============================================================
ED NOP:
  prefix: ed
  flags: { multiple: true }
  cond: (x == 0) or (x == 3) or ((x == 1) and (z == 7) and (y >= 6)) or ((x == 2) and ((z > 3) or (y < 4)))
  mcycles: []

IN $RY,(C):
  prefix: ed
  cond: (x == 1) and (y != 6) and (z == 0)
  mcycles:
    - { type: ioread, ab: $BC, dst: $DLATCH, action: $WZ=$BC+1 }
    - { type: overlapped, action: "$RRY=_z80_in(cpu,$DLATCH)" }

IN (C):
  prefix: ed
  cond: (x == 1) and (y == 6) and (z == 0)
  mcycles:
    - { type: ioread, ab: $BC, dst: $DLATCH, action: $WZ=$BC+1 }
    # discard result, only set flags
    - { type: overlapped, action: "_z80_in(cpu,$DLATCH)" }

OUT (C),$RY:
  prefix: ed
  cond: (x == 1) and (y != 6) and (z == 1)
  mcycles:
    - { type: iowrite, ab: $BC, db: $RRY, action: $WZ=$BC+1 }

OUT (C),0:
  prefix: ed
  cond: (x == 1) and (y == 6) and (z == 1)
  mcycles:
    - { type: iowrite, ab: $BC, db: "0", action: $WZ=$BC+1 }

SBC HL,$RP:
  prefix: ed
  cond: (x == 1) and (z == 2) and (q == 0)
  mcycles:
    - { type: generic, tcycles: 7, action: "_z80_sbc16(cpu,$RRP)" }

ADC HL,$RP:
  prefix: ed
  cond: (x == 1) and (z == 2) and (q == 1)
  mcycles:
    - { type: generic, tcycles: 7, action: "_z80_adc16(cpu,$RRP)" }

LD (nn),$RP:
  prefix: ed
  cond: (x == 1) and (z == 3) and (q == 0)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, ab: $PC++, dst: $WZH }
    - { type: mwrite, ab: $WZ++, db: $RRPL }
    - { type: mwrite, ab: $WZ, db: $RRPH }

LD $RP,(nn):
  prefix: ed
  cond: (x == 1) and (z == 3) and (q == 1)
  mcycles:
    - { type: mread, ab: $PC++, dst: $WZL }
    - { type: mread, ab: $PC++, dst: $WZH }
    - { type: mread, ab: $WZ++, dst: $RRPL }
    - { type: mread, ab: $WZ, dst: $RRPH }

NEG:
  prefix: ed
  cond: (x == 1) and (z == 4)
  flags: { multiple: true }
  mcycles:
    - { type: overlapped, action: "_z80_neg8(cpu)"}

RETI:
  prefix: ed
  cond: (x == 1) and (y != 0) and (z == 5)
  flags: { multiple: true }
  mcycles:
    # virtual RETI pin must be set as early as possible
    - { type: mread, ab: $SP++, dst: $WZL, action: "pins|=Z80_RETI" }
    - { type: mread, ab: $SP++, dst: $WZH, action: "$PC=$WZ" }
    - { type: overlapped, post_action: "cpu->iff1=cpu->iff2"}


RETN:
  prefix: ed
  cond: (x == 1) and (y == 0) and (z == 5)
  mcycles:
    # virtual RETI will not be set
    - { type: mread, ab: $SP++, dst: $WZL }
    - { type: mread, ab: $SP++, dst: $WZH, action: "$PC=$WZ" }
    - { type: overlapped, post_action: "cpu->iff1=cpu->iff2"}

IM $IMY:
  prefix: ed
  cond: (x == 1) and (z == 6)
  mcycles:
    - { type: overlapped, action: "$IM=$IMY" }

LD I,A:
  prefix: ed
  cond: (x == 1) and (y == 0) and (z == 7)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: overlapped, action: "cpu->i=cpu->a" }

LD R,A:
  prefix: ed
  cond: (x == 1) and (y == 1) and (z == 7)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: overlapped, action: "cpu->r=cpu->a" }

LD A,I:
  prefix: ed
  cond: (x == 1) and (y == 2) and (z == 7)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: overlapped, action: "cpu->a=cpu->i;cpu->f=_z80_sziff2_flags(cpu, cpu->i)"}

LD A,R:
  prefix: ed
  cond: (x == 1) and (y == 3) and (z == 7)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: overlapped, action: "cpu->a=cpu->r;cpu->f=_z80_sziff2_flags(cpu, cpu->r)"}

RRD:
  prefix: ed
  cond: (x == 1) and (y == 4) and (z == 7)
  mcycles:
    - { type: mread, ab: "cpu->hl", dst: $DLATCH }
    - { type: generic, tcycles: 4, action: "$DLATCH=_z80_rrd(cpu,$DLATCH)" }
    - { type: mwrite, ab: "cpu->hl", db: $DLATCH, action: "$WZ=cpu->hl+1" }

RLD:
  prefix: ed
  cond: (x == 1) and (y == 5) and (z == 7)
  mcycles:
    - { type: mread, ab: "cpu->hl", dst: $DLATCH }
    - { type: generic, tcycles: 4, action: "$DLATCH=_z80_rld(cpu,$DLATCH)" }
    - { type: mwrite, ab: "cpu->hl", db: $DLATCH, action: "$WZ=cpu->hl+1" }

LDI:
  prefix: ed
  cond: (x == 2) and (y == 4) and (z == 0)
  mcycles:
    - { type: mread, ab: "cpu->hl++", dst: $DLATCH }
    - { type: mwrite, ab: "cpu->de++", db: $DLATCH }
    - { type: generic, tcycles: 2, action: "_z80_ldi_ldd(cpu,$DLATCH)" }

LDD:
  prefix: ed
  cond: (x == 2) and (y == 5) and (z == 0)
  mcycles:
    - { type: mread, ab: "cpu->hl--", dst: $DLATCH }
    - { type: mwrite, ab: "cpu->de--", db: $DLATCH }
    - { type: generic, tcycles: 2, action: "_z80_ldi_ldd(cpu,$DLATCH)" }

LDIR:
  prefix: ed
  cond: (x == 2) and (y == 6) and (z == 0)
  mcycles:
    - { type: mread, ab: "cpu->hl++", dst: $DLATCH }
    - { type: mwrite, ab: "cpu->de++", db: $DLATCH }
    - { type: generic, tcycles: 2, action: "if(!_z80_ldi_ldd(cpu,$DLATCH)){_goto($NEXTSTEP+5);}"}
    - { type: generic, tcycles: 5, action: "$WZ=--$PC;--$PC;" }

LDDR:
  prefix: ed
  cond: (x == 2) and (y == 7) and (z == 0)
  mcycles:
    - { type: mread, ab: "cpu->hl--", dst: $DLATCH }
    - { type: mwrite, ab: "cpu->de--", db: $DLATCH }
    - { type: generic, tcycles: 2, action: "if(!_z80_ldi_ldd(cpu,$DLATCH)){_goto($NEXTSTEP+5);}"}
    - { type: generic, tcycles: 5, action: "$WZ=--$PC;--$PC;" }

CPI:
  prefix: ed
  cond: (x == 2) and (y == 4) and (z == 1)
  mcycles:
    - { type: mread, ab: "cpu->hl++", dst: $DLATCH }
    - { type: generic, tcycles: 5, action: "$WZ++;_z80_cpi_cpd(cpu,$DLATCH)"}

CPD:
  prefix: ed
  cond: (x == 2) and (y == 5) and (z == 1)
  mcycles:
    - { type: mread, ab: "cpu->hl--", dst: $DLATCH }
    - { type: generic, tcycles: 5, action: "$WZ--;_z80_cpi_cpd(cpu,$DLATCH)"}

CPIR:
  prefix: ed
  cond: (x == 2) and (y == 6) and (z == 1)
  mcycles:
    - { type: mread, ab: "cpu->hl++", dst: $DLATCH }
    - { type: generic, tcycles: 5, action: "$WZ++;if(!_z80_cpi_cpd(cpu,$DLATCH)){_goto($NEXTSTEP+5);}"}
    - { type: generic, tcycles: 5, action: "$WZ=--$PC;--$PC"}

CPDR:
  prefix: ed
  cond: (x == 2) and (y == 7) and (z == 1)
  mcycles:
    - { type: mread, ab: "cpu->hl--", dst: $DLATCH }
    - { type: generic, tcycles: 5, action: "$WZ--;if(!_z80_cpi_cpd(cpu,$DLATCH)){_goto($NEXTSTEP+5);}"}
    - { type: generic, tcycles: 5, action: "$WZ=--$PC;--$PC"}

INI:
  prefix: ed
  cond: (x == 2) and (y == 4) and (z == 2)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: ioread, ab: $BC, dst: $DLATCH, action: "$WZ=$BC+1;$B--;" }
    - { type: mwrite, ab: "cpu->hl++", db: $DLATCH, action: "_z80_ini_ind(cpu,$DLATCH,$C+1)" }

IND:
  prefix: ed
  cond: (x == 2) and (y == 5) and (z == 2)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: ioread, ab: $BC, dst: $DLATCH, action: "$WZ=$BC-1;$B--;" }
    - { type: mwrite, ab: "cpu->hl--", db: $DLATCH, action: "_z80_ini_ind(cpu,$DLATCH,$C-1)" }

INIR:
  prefix: ed
  cond: (x == 2) and (y == 6) and (z == 2)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: ioread, ab: $BC, dst: $DLATCH, action: "$WZ=$BC+1;$B--;" }
    - { type: mwrite, ab: "cpu->hl++", db: $DLATCH, action: "if (!_z80_ini_ind(cpu,$DLATCH,$C+1)){_goto($NEXTSTEP+5);}" }
    - { type: generic, tcycles: 5, action: "$WZ=--$PC;--$PC"}

INDR:
  prefix: ed
  cond: (x == 2) and (y == 7) and (z == 2)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: ioread, ab: $BC, dst: $DLATCH, action: "$WZ=$BC-1;$B--;" }
    - { type: mwrite, ab: "cpu->hl--", db: $DLATCH, action: "if (!_z80_ini_ind(cpu,$DLATCH,$C-1)){_goto($NEXTSTEP+5);}" }
    - { type: generic, tcycles: 5, action: "$WZ=--$PC;--$PC"}

OUTI:
  prefix: ed
  cond: (x == 2) and (y == 4) and (z == 3)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: mread, ab: "cpu->hl++", dst: $DLATCH, action: "$B--" }
    - { type: iowrite, ab: $BC, db: $DLATCH, action: "$WZ=$BC+1;_z80_outi_outd(cpu,$DLATCH)"}

OUTD:
  prefix: ed
  cond: (x == 2) and (y == 5) and (z == 3)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: mread, ab: "cpu->hl--", dst: $DLATCH, action: "$B--" }
    - { type: iowrite, ab: $BC, db: $DLATCH, action: "$WZ=$BC-1;_z80_outi_outd(cpu,$DLATCH)"}

OTIR:
  prefix: ed
  cond: (x == 2) and (y == 6) and (z == 3)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: mread, ab: "cpu->hl++", dst: $DLATCH, action: "$B--" }
    - { type: iowrite, ab: $BC, db: $DLATCH, action: "$WZ=$BC+1;if(!_z80_outi_outd(cpu,$DLATCH)){_goto($NEXTSTEP+5);}"}
    - { type: generic, tcycles: 5, action: "$WZ=--$PC;--$PC"}

OTDR:
  prefix: ed
  cond: (x == 2) and (y == 7) and (z == 3)
  mcycles:
    - { type: generic, tcycles: 1 }
    - { type: mread, ab: "cpu->hl--", dst: $DLATCH, action: "$B--" }
    - { type: iowrite, ab: $BC, db: $DLATCH, action: "$WZ=$BC-1;if(!_z80_outi_outd(cpu,$DLATCH)){_goto($NEXTSTEP+5);}"}
    - { type: generic, tcycles: 5, action: "$WZ=--$PC;--$PC"}

#== CB prefix block ============================================================

cb:
  flags: { special: true }
  mcycles:
    - { type: overlapped, action: "{uint8_t z=cpu->opcode&7;_z80_cb_action(cpu,z,z);}" }

cbhl:
  flags: { special: true }
  mcycles:
    - { type: mread, tcycles: 4, ab: "cpu->hl", dst: $DLATCH, action: "if(!_z80_cb_action(cpu,6,6)){_goto($NEXTSTEP+3);}" }
    - { type: mwrite, ab: "cpu->hl", db: $DLATCH }

ddfdcb:
  flags: { special: true }
  mcycles:
    # load d-offset, the first mread tcycle was overlapped from fetch_cb!
    - { type: generic, tcycles: 1, action: "_wait();_mread(cpu->pc++)" }
    - { type: generic, tcycles: 1, action: "_z80_ddfdcb_addr(cpu,pins)" }
    # load opcode
    - { type: mread, ab: $PC++, tcycles: 5, dst: "cpu->opcode"}
    # read operand
    - { type: mread, ab: $ADDR, tcycles: 4, dst: $DLATCH, action: "if(!_z80_cb_action(cpu,6,cpu->opcode&7)){_goto($NEXTSTEP+3);}" }
    # write result back
    - { type: mwrite, ab: $ADDR, db: $DLATCH }

#== INTERRUPT HANDLING =========================================================

int_im0:
  flags: { special: true }
  mcycles:
    # special machine cycle which replaces the opcode machine fetch,
    # issues an M1|IORQ cycle and uses the result as the next opcode
    - { type: generic, tcycles: 1, action: "cpu->iff1=cpu->iff2=false" }
    - { type: generic, tcycles: 1, action: "pins|=(Z80_M1|Z80_IORQ)" }
    - { type: generic, tcycles: 1, action: "_wait();cpu->opcode=_z80_get_db(pins)" }
    # combined refresh and branch to loaded instruction cycle
    - { type: generic, tcycles: 1, action: "pins=_z80_refresh(cpu,pins)" }
    - { type: generic, tcycles: 1, action: "cpu->addr=cpu->hl;_goto(cpu->opcode)" }

int_im1:
  flags: { special: true }
  mcycles:
    # special machine cycle which replaces the opcode machine fetch,
    # this issues an M1|IORQ cycle like IM0 and IM2, but ignores the result
    - { type: generic, tcycles: 1, action: "cpu->iff1=cpu->iff2=false" }
    - { type: generic, tcycles: 1, action: "pins|=(Z80_M1|Z80_IORQ)" }
    - { type: generic, tcycles: 1, action: "_wait()"}
    # a regular refresh cycle + one extra tcycle
    - { type: generic, tcycles: 3, action: "pins=_z80_refresh(cpu,pins)" }
    # two regular write machine cycles to push PC on stack, and set PC to 0x0038
    - { type: mwrite, ab: --$SP, db: $PCH }
    - { type: mwrite, ab: --$SP, db: $PCL, action: "$WZ=$PC=0x0038" }
    # finally a regular opcode fetch to enter the ISR at address 0x0038

int_im2:
  flags: { special: true }
  mcycles:
    # special machine cycle which replaces the opcode machine fetch,
    # this issues an M1|IORQ cycle and uses the result as low byte of the interrupt vector
    - { type: generic, tcycles: 1, action: "cpu->iff1=cpu->iff2=false" }
    - { type: generic, tcycles: 1, action: "pins|=(Z80_M1|Z80_IORQ)" }
    - { type: generic, tcycles: 1, action: "_wait();$DLATCH=_z80_get_db(pins)" }
    # a regular refresh cycle + one extra tcycle
    - { type: generic, tcycles: 3, action: "pins=_z80_refresh(cpu,pins)" }
    # two regular write machine cycles to push PC on stack, and set WZ to interrupt vector address
    - { type: mwrite, ab: --$SP, db: $PCH }
    - { type: mwrite, ab: --$SP, db: $PCL, action: "$WZL=$DLATCH;$WZH=cpu->i" }
    # two regular read machine cycles to read isr address
    - { type: mread, ab: $WZ++, dst: $DLATCH }
    - { type: mread, ab: $WZ, dst: $WZH, action: "$WZL=$DLATCH;$PC=$WZ" }
    # finally a regular opcode fetch to enter the ISR at address 0x0038

nmi:
  flags: { special: true}
  mcycles:
    # simulate a regular opcode fetch machine cycle (with one extra tcycle)
    - { type: generic, tcycles: 1, action: "_wait();cpu->iff1=false" }
    - { type: generic, tcycles: 3, action: "pins=_z80_refresh(cpu,pins)"}
    # two regular write machine cycles to push PC on stack, and set PC to 0x0066
    - { type: mwrite, ab: --$SP, db: $PCH }
    - { type: mwrite, ab: --$SP, db: $PCL, action: "$WZ=$PC=0x0066" }
    # finally a regular opcode fetch to enter the ISR at address 0x0066
